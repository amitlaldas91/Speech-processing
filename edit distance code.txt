#include <bits/stdc++.h>
using namespace std;
class Solution {
   public:
   int minDistance(string s, string t) {
      int n = s.size();
      int m =t.size();
      int** dp = new int*[n+1];
      for(int i =0;i<=n;i++){
         dp[i] = new int[m+1];
         for(int j=0;j<=m;j++){
            dp[i][j]=0;
            if(i==0)dp[i][j]=j;
            else if(j==0)dp[i][j] = i;
         }
      }
      s = " " + s;
      t = " " + t;
      for(int i =1;i<=n;i++){
         for(int j = 1;j<=m;j++){
            if(s[i] !=t[j]){
               dp[i][j] =min({dp[i-1][j] + 1,dp[i][j-1] + 1,dp[i-1][j-1] + 2});
               //cout<<dp[i][j]<<" ";
               
            }else{
               dp[i][j] = dp[i-1][j-1];
               //cout<<dp[i][j]<<" ";
            }
         }
         //cout<<"\n ";
      }
      
    // Print the dynamic programming matrix
    cout << "Dynamic Programming Matrix:" << endl;
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }
      return dp[n][m];

      
      }
};
main(){
   Solution ob;
   //cout<<"matrix:"<<"\n";
   cout << (ob.minDistance("intention", "execution"));
   
   cout<<" is Distance.";
   

}